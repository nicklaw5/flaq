rtmp {
    server {
        listen 1935;
        ping 30s;
        chunk_size 4096;

        application app {
            live on;

            # Allow publishing from anyone
            allow publish all;

            # No RTMP playback
            deny play all;

            # Authenticate the users stream key before capturing stream with this callback
            on_publish http://127.0.0.1:3000/streams/on-publish;

            # When the user stops stream, fire this callback
            on_publish_done http://127.0.0.1:3000/streams/on-publish-done;
        }

        application live {
            live on;

            # Record the live stream
            push rtmp://127.0.0.1/recorder;

            # Only allow publishing from localhost
            allow publish 127.0.0.1;
            deny publish all;

            # No RTMP playback
            deny play all;

            # Package this stream as HLS
            hls on;
            hls_cleanup on;
            hls_continuous off;
            hls_fragment 2s;
            hls_playlist_length 6s;

            # Put streams in their own subdirectory under `hls_path`
            hls_nested on;
            hls_fragment_naming system;
            hls_path {{ rtmp_live_path }};
        }

        application recorder {
            live on;

            # No RTMP playback
            deny play all;

            # Record stream as single file
            recorder all {
                record all;
                # record_unique on;
                record_suffix -%d-%b-%y-%T.flv;
                record_path {{ rtmp_record_path }};
            }

            # Make stream thumbnails
            recorder preview {
                record keyframes;
                record_max_frames 4;
                record_path {{ rtmp_thumbnail_path }};
                record_interval 30s;

                exec_record_done ffmpeg -i $path -vcodec png -vframes 1 -an -f rawvideo -s 320x240 -ss 00:00:01 -y {{ rtmp_thumbnail_path }}/$name.png;
            }
        }
    }
}
